using PackFresh.CustomerSite.Models;
using System;
using System.Collections.Generic;
using System.Linq;
using System.Threading.Tasks;
using System.Net.Mail;
using MailKit.Net.Smtp;
using MimeKit;
using System.Diagnostics;

namespace PackFresh.CustomerSite.Services
{
    public class EmailSender
    {

        #region COMPONENT DECLARATION

        private String host = "smtp.gmail.com";
        private int port = 587;
        private String username = "teamauk124@gmail.com";
        private String password = "CPPTeam124";//TODO: Hide plaintext confidential values like the following
        private String toEmailAddress = "silwal.anurag@gmail.com"; // TODO : Packfresh Customer Team Email

        #endregion


        #region SEND EMAIL

        public void ReceiveMail(Contact contact)
        {
            String _DEFAULTtemplate = "";
            var message = new MimeMessage();
            message.From.Add(new MailboxAddress(contact.Name , contact.Email));
            message.To.Add(new MailboxAddress("Packfresh Support Team", toEmailAddress));
            message.Subject = contact.Subject;


            var bodyBuilder = new BodyBuilder();
            bodyBuilder.HtmlBody = base64Decode(_DEFAULTtemplate);
            message.Body = bodyBuilder.ToMessageBody();

            var part = message.BodyParts.OfType<TextPart>().FirstOrDefault();

            part.Text = part.Text.Replace("$[NAME]", contact.Name);
            part.Text = part.Text.Replace("$[EMAIL]", contact.Email);
            part.Text = part.Text.Replace("$[PHONE]", contact.Phone);
            part.Text = part.Text.Replace("$[COMPANY]", contact.Company);
            part.Text = part.Text.Replace("$[REASON]", contact.Subject);
            part.Text = part.Text.Replace("$[MESSAGE]", contact.Message);


            using (var client = new MailKit.Net.Smtp.SmtpClient())
            {

                // Note: since we don't have an OAuth2 token, disable 	// the XOAUTH2 authentication mechanism.
                client.Connect(host, port, false);
                client.Authenticate(username, password);
                client.AuthenticationMechanisms.Remove("XOAUTH2");
                client.Send(message);
                client.Disconnect(true);
            }


        }

        #endregion



        #region base64Encode  

        public static string base64Encode(string data)
        {
            try
            {
                byte[] encData_byte = new byte[data.Length];
                encData_byte = System.Text.Encoding.UTF8.GetBytes(data);
                string encodedData = Convert.ToBase64String(encData_byte);
                return encodedData;
            }
            catch (Exception e)
            {
                throw new Exception(e.Message);
            }
        }


        #endregion

        #region base64Decode  



        public static string base64Decode(string data)
        {
            try
            {
                System.Text.UTF8Encoding encoder = new System.Text.UTF8Encoding();
                System.Text.Decoder utf8Decode = encoder.GetDecoder();

                byte[] todecode_byte = Convert.FromBase64String(data);
                int charCount = utf8Decode.GetCharCount(todecode_byte, 0, todecode_byte.Length);
                char[] decoded_char = new char[charCount];
                utf8Decode.GetChars(todecode_byte, 0, todecode_byte.Length, decoded_char, 0);
                String result = new String(decoded_char);
                Debug.WriteLine(result);
                Console.WriteLine(result);
                return result;
            }
            catch (Exception e)
            {
                throw new Exception(e.Message);
            }
        }


        #endregion


    }
}
